{"version":3,"sources":["cat-icon.png","serviceWorker.js","Post.js","Feed.js","AddPost.js","SocialPosts.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Post","props","handleUpVote","post","handleDownVote","bind","className","this","title","src","Cat","alt","onClick","upVotes","downVotes","React","Component","Feed","posts","indexOf","toggleView","map","key","viewClass","view","AddPost","handleSubmit","e","preventDefault","addPost","state","thought","setState","handleNewThought","target","value","handleNewTitle","onSubmit","type","onChange","SocialPosts","feed","unshift","index","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccf32a78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-icon.1b92b5b9.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Post.css';\r\nimport Cat from './cat-icon.png';\r\n\r\nexport class Post extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleDownVote = this.handleDownVote.bind(this);\r\n        this.handleUpVote = this.handleUpVote.bind(this);\r\n    }\r\n\r\n    handleUpVote = () => {\r\n        this.props.handleUpVote(this.props.post);\r\n    }\r\n\r\n    handleDownVote = () => {\r\n        this.props.handleDownVote(this.props.post);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className='Title'>{this.props.post.title}</p>\r\n                <p className='Post'>{this.props.post.post}</p>\r\n                <div className='Vote-bar'>\r\n                    <img src={Cat} alt='Upvote Cat Icon'className='Up-cat' onClick={this.handleUpVote}></img>\r\n                    <p className='Votes'>{this.props.post.upVotes}</p>\r\n                    <img src={Cat} alt='Downvote Cat Icon' className='Down-cat' onClick={this.handleDownVote}></img>\r\n                    <p className='Votes'>{this.props.post.downVotes}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Post } from './Post.js';\r\nimport './Feed.css'\r\n\r\nexport class Feed extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleUpVote = this.handleUpVote.bind(this);\r\n        this.handleDownVote = this.handleDownVote.bind(this);\r\n    }\r\n\r\n    handleUpVote = (post) => {\r\n        this.props.handleUpVote(this.props.posts.indexOf(post));\r\n    }\r\n\r\n    handleDownVote = (post) => {\r\n        this.props.handleDownVote(this.props.posts.indexOf(post));\r\n    }\r\n\r\n    toggleView = () => {\r\n        this.props.toggleView();\r\n    }\r\n\r\n    render() {\r\n        const posts = this.props.posts.map((post) => {\r\n            return (\r\n                <Post key={this.props.posts.indexOf(post)} post={post} handleUpVote={this.handleUpVote} handleDownVote={this.handleDownVote}></Post>\r\n            )\r\n        })\r\n        const viewClass = this.props.view ? 'Display' : 'Hide'\r\n        return (\r\n            <div className={viewClass}>\r\n                <button onClick={this.toggleView} className='Add-thought'>New Thought</button>\r\n                {posts}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './AddPost.css';\r\n\r\nexport class AddPost extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            thought: ''\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleNewTitle = this.handleNewTitle.bind(this);\r\n        this.handleNewThought = this.handleNewThought.bind(this);\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addPost(this.state.title, this.state.thought);\r\n        this.setState({title: '', thought: ''});\r\n    }\r\n\r\n    handleNewThought = (e) => {\r\n        this.setState({thought: e.target.value});\r\n    }\r\n\r\n    handleNewTitle = (e) => {\r\n        this.setState({title: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        const viewClass = this.props.view ? 'Display Post-form' : 'Hide';\r\n        return (\r\n            <form className={viewClass} onSubmit={this.handleSubmit}>\r\n                <p className='Title'>Title</p>\r\n                <input type='text' value={this.state.title} onChange={this.handleNewTitle} className='Post-input'></input>\r\n                <p className='Title'>Thought</p>\r\n                <textarea value={this.state.thought} onChange={this.handleNewThought} className='Post-input Content'></textarea>\r\n                <button className='Add-button'>Add Post</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Feed } from './Feed.js';\r\nimport { AddPost } from './AddPost.js';\r\nimport posts from './Posts.json';\r\nimport './SocialPosts.css';\r\n\r\nexport class SocialPosts extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            view: false,\r\n            feed: posts\r\n        }\r\n    }\r\n\r\n    toggleView = () => {\r\n        const view = !this.state.view;\r\n        this.setState({view: view});\r\n    }\r\n\r\n    addPost = (title, thought) => {\r\n        if (title && thought) {\r\n            let feed = this.state.feed;\r\n            feed.unshift({title: title, post: thought, upVotes: 0, downVotes: 0})\r\n            this.setState({view: !this.state.view, feed: feed});\r\n        } else {\r\n            this.setState({view: !this.state.view});\r\n        }\r\n    }\r\n\r\n    handleUpVote = (index) => {\r\n        let feed = this.state.feed;\r\n        feed[index].upVotes++;\r\n        this.setState({feed: feed});\r\n    }\r\n\r\n    handleDownVote = (index) => {\r\n        let feed = this.state.feed;\r\n        feed[index].downVotes++;\r\n        this.setState({feed: feed});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Feed'>\r\n                <p className='Header'>Mister Taco's Thoughts</p>\r\n                <AddPost view={this.state.view} addPost={this.addPost}></AddPost>\r\n                <Feed posts={this.state.feed} view={!this.state.view} handleUpVote={this.handleUpVote} handleDownVote={this.handleDownVote} toggleView={this.toggleView}></Feed>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { SocialPosts } from './SocialPosts';\n\nReactDOM.render(<SocialPosts />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}